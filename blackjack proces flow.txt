app.ts

let dealerHand: ICard[] = [];
let playerHand: ICard[] = [];

types.ts
export enum Suit {
    Diamonds = "♦",
    Hearts = "♥",
    Spades = "♠",
    Clubs = "♣"
}
export interface ICard {
    value: number;
    suit: Suit
    getName(): string
}

app.ts
const deck: Deck = new Deck();
let balance = 100;

deck.ts
class Deck implements IDealable {
    private deck: Card[] = [];
    
    constructor() {
        this.reset()
    }

    reset() {
        const cards = this.makeDeck();
        this.deck = shuffleArray(cards);
    }

    deal(num: number): Card[] {
        const dealtCards: Card[] = [];

        for (let i = 0; i < num; i++) {
            const card = this.deck.pop();
            dealtCards.push(card!)
        }

        return dealtCards
    }

    private makeDeck() {
        const cards: Card[] = []
        const suits = [Suit.Hearts, Suit.Diamonds, Suit.Clubs, Suit.Spades]
        for (let suit =0; suit < 4; suit++) {
            for (let value = 1; value <= 13; value++) {
                const card = new Card(value, suits[suit])
                cards.push(card);
            }
        }
        return cards
    }
}

utils.ts
export function shuffleArray<T>(array: T[]) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

types.ts
export interface IDealable {
    deal(num: number): ICard[],
    reset(): void;
}


app.ts
while (balance > 0) {
  console.log(`\nPlayer funds $${balance}`);
  const bet = getBet(balance);
  balance -= bet;

  // Deal the cards
  deck.reset();
  playerHand = deck.deal(2);
  dealerHand = deck.deal(2);

  const playerValue = getHandValue(playerHand);
  const dealerValue = getHandValue(dealerHand);

  console.log(`Your hand: ${getStrHand(playerHand)} (Total: ${playerValue})`);
  console.log(`Dealer's hand: ${getStrHand(dealerHand, true)}`);
  if (playerValue === 21) {
    balance += bet * 2.5;
    console.log(`Blackjack! You won $${bet * 2.5}`);
    continue;
  } else if (dealerValue === 21) {
    console.log(`Dealer's hand: ${getStrHand(dealerHand)}, (Total: 21)`);
    console.log("Dealer has Blackjack, you lost...");
    continue;
  }

  const finalPlayerValue = playerTurn(playerHand, deck);
  if (finalPlayerValue > 21) {
    console.log("You bust and lost...");
    continue;
  }
  const finalDealerValue = dealerTurn(dealerHand, deck);
  if (finalDealerValue > 21 || finalPlayerValue > finalDealerValue) {
    balance += bet * 2;
    console.log(`You won $${bet * 2}`);
  }
  else if (finalDealerValue === finalPlayerValue) {
    balance += bet
    console.log("Push (tie).")
  } else {
    console.log("You lost to the dealer.")
  }
}

console.log("You ran out of money!");


utils.ts
export function getBet(balance: number): number {
  while (true) {
    const bet = prompt("Enter your bet: ");
    try {
      const numBet = Number(bet);
      if (numBet > 0 && numBet <= balance) {
        return numBet;
      }
      console.log("Invalid bet.");
    } catch {
      console.log("Please enter a valid number.");
    }
  }
}

export function getHandValue(cards: ICard[]): number {
  let value = 0;
  let aces = 0;

  for (const card of cards) {
      if (card.value === 1) {
          aces++
          continue
      }

      value += Math.min(card.value, 10)
  }

  if (aces === 0) return value;
  if (value >= 11) return value + aces
  return value + 11 + (aces - 1)
}

export function getStrHand(hand: ICard[], hideSecondCard: boolean = false): string {
  let str = "";

  for (const [idx, card] of hand.entries()) {
      if (idx !== 0) str += ", "
      if (idx === 1 && hideSecondCard) {
        str += "[hidden]"
        break
      }
      str += `${card.getName()}${card.suit}`
  }

  return str;
}



app.ts
function playerTurn(playerHand: ICard[], deck: Deck): number {
  let handValue = getHandValue(playerHand);

  while (true) {
    const action = getDecision();
    if (action !== "hit") return handValue;

    playerHand.push(deck.deal(1)[0]);
    handValue = getHandValue(playerHand);
    console.log(`Your hand: ${getStrHand(playerHand)} (Total: ${handValue})`);

    if (handValue > 21) {
      return handValue;
    }
  }
}

function dealerTurn(dealerHand: ICard[], deck: Deck): number {
  let handValue = getHandValue(dealerHand);

  while (true) {
    console.log(
      `Dealer's hand: ${getStrHand(dealerHand)} (Total: ${handValue})`
    );
    if (handValue >= 17) return handValue;

    dealerHand.push(deck.deal(1)[0]);
    handValue = getHandValue(dealerHand);
  }
}


utils.ts
export function getDecision(): "hit" | "stand" {
  while (true) {
    const decision = prompt("Your action: (hit/stand): ").toLowerCase();
    if (decision === "stand" || decision === "hit") return decision;
  }
}




card.ts
import { ICard, Suit } from "./types";

class Card implements ICard{
    static readonly CARD_VALUES: Record<number, string> = {
        1: "A",
        2: "2",
        3: "3",
        4: "4",
        5: "5",
        6: "6",
        7: "7",
        8: "8",
        9: "9",
        10: "10",
        11: "J",
        12: "Q",
        13: "K"
    }

    value: number;
    suit: Suit;

    constructor(value: number, suit: Suit) {
        this.value = value;
        this.suit = suit
    }

    getName() {
        return Card.CARD_VALUES[this.value]
    }
}

export default Card

This is the process flow of the blackjack project game in typescript